// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ServiceMessage.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace WS.Common {

  /// <summary>Holder for reflection information generated from ServiceMessage.proto</summary>
  public static partial class ServiceMessageReflection {

    #region Descriptor
    /// <summary>File descriptor for ServiceMessage.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ServiceMessageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRTZXJ2aWNlTWVzc2FnZS5wcm90bxIJV1MuQ29tbW9uGhlnb29nbGUvcHJv",
            "dG9idWYvYW55LnByb3RvGg5Db21tb25QQi5wcm90byJpChJSZXNwb25zZU1l",
            "c3NhZ2VBbnkSLwoLcmVxZXVzdFR5cGUYASABKA4yGi5XUy5Db21tb24uRW51",
            "bVJlcXVlc3RUeXBlEiIKBERhdGEYAiABKAsyFC5nb29nbGUucHJvdG9idWYu",
            "QW55IloKD0FjY291bnRPcmRlclJzcBISCgp0b3RhbENvdW50GAEgASgFEjMK",
            "DEFjY291dE9yZGVycxgCIAMoCzIdLldTLkNvbW1vbi5BY2NvdW50T3JkZXJP",
            "dXRwdXQiiQEKEkFjY291bnRPcmRlck91dHB1dBIKCgJJZBgBIAEoCRIRCglB",
            "Y2NvdW50SWQYAiABKAkSDwoHQWdlbnRJZBgDIAEoCRIUCgxJbnN0cnVtZW50",
            "SWQYBCABKAkSDQoFcHJpY2UYBSABKAESDAoEbG90cxgGIAEoBRIQCgh0cmFk",
            "ZXJJZBgHIAEoCSJDCgdGaWxsUnNwEhIKCnRvdGFsQ291bnQYASABKAUSJAoF",
            "RmlsbHMYAiADKAsyFS5XUy5Db21tb24uRmlsbE91dHB1dCKCAQoKRmlsbE91",
            "dHB1dBIKCgJJZBgBIAEoCRIRCglBY2NvdW50SWQYAiABKAkSDwoHQWdlbnRJ",
            "ZBgDIAEoCRIRCglSZWZlcmVuY2UYBCABKAkSFAoMSW5zdHJ1bWVudElkGAUg",
            "ASgJEg0KBXByaWNlGAYgASgBEgwKBGxvdHMYByABKAViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.AnyReflection.Descriptor, global::WS.Common.CommonPBReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::WS.Common.ResponseMessageAny), global::WS.Common.ResponseMessageAny.Parser, new[]{ "ReqeustType", "Data" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WS.Common.AccountOrderRsp), global::WS.Common.AccountOrderRsp.Parser, new[]{ "TotalCount", "AccoutOrders" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WS.Common.AccountOrderOutput), global::WS.Common.AccountOrderOutput.Parser, new[]{ "Id", "AccountId", "AgentId", "InstrumentId", "Price", "Lots", "TraderId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WS.Common.FillRsp), global::WS.Common.FillRsp.Parser, new[]{ "TotalCount", "Fills" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::WS.Common.FillOutput), global::WS.Common.FillOutput.Parser, new[]{ "Id", "AccountId", "AgentId", "Reference", "InstrumentId", "Price", "Lots" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///响应消息
  /// </summary>
  public sealed partial class ResponseMessageAny : pb::IMessage<ResponseMessageAny> {
    private static readonly pb::MessageParser<ResponseMessageAny> _parser = new pb::MessageParser<ResponseMessageAny>(() => new ResponseMessageAny());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResponseMessageAny> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WS.Common.ServiceMessageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseMessageAny() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseMessageAny(ResponseMessageAny other) : this() {
      reqeustType_ = other.reqeustType_;
      data_ = other.data_ != null ? other.data_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResponseMessageAny Clone() {
      return new ResponseMessageAny(this);
    }

    /// <summary>Field number for the "reqeustType" field.</summary>
    public const int ReqeustTypeFieldNumber = 1;
    private global::WS.Common.EnumRequestType reqeustType_ = global::WS.Common.EnumRequestType.None;
    /// <summary>
    ///请求消息类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::WS.Common.EnumRequestType ReqeustType {
      get { return reqeustType_; }
      set {
        reqeustType_ = value;
      }
    }

    /// <summary>Field number for the "Data" field.</summary>
    public const int DataFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Any data_;
    /// <summary>
    ///结果数据
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Any Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResponseMessageAny);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResponseMessageAny other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReqeustType != other.ReqeustType) return false;
      if (!object.Equals(Data, other.Data)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ReqeustType != global::WS.Common.EnumRequestType.None) hash ^= ReqeustType.GetHashCode();
      if (data_ != null) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ReqeustType != global::WS.Common.EnumRequestType.None) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ReqeustType);
      }
      if (data_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ReqeustType != global::WS.Common.EnumRequestType.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ReqeustType);
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResponseMessageAny other) {
      if (other == null) {
        return;
      }
      if (other.ReqeustType != global::WS.Common.EnumRequestType.None) {
        ReqeustType = other.ReqeustType;
      }
      if (other.data_ != null) {
        if (data_ == null) {
          Data = new global::Google.Protobuf.WellKnownTypes.Any();
        }
        Data.MergeFrom(other.Data);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ReqeustType = (global::WS.Common.EnumRequestType) input.ReadEnum();
            break;
          }
          case 18: {
            if (data_ == null) {
              Data = new global::Google.Protobuf.WellKnownTypes.Any();
            }
            input.ReadMessage(Data);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///委托单响应消息
  /// </summary>
  public sealed partial class AccountOrderRsp : pb::IMessage<AccountOrderRsp> {
    private static readonly pb::MessageParser<AccountOrderRsp> _parser = new pb::MessageParser<AccountOrderRsp>(() => new AccountOrderRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccountOrderRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WS.Common.ServiceMessageReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountOrderRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountOrderRsp(AccountOrderRsp other) : this() {
      totalCount_ = other.totalCount_;
      accoutOrders_ = other.accoutOrders_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountOrderRsp Clone() {
      return new AccountOrderRsp(this);
    }

    /// <summary>Field number for the "totalCount" field.</summary>
    public const int TotalCountFieldNumber = 1;
    private int totalCount_;
    /// <summary>
    ///总数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalCount {
      get { return totalCount_; }
      set {
        totalCount_ = value;
      }
    }

    /// <summary>Field number for the "AccoutOrders" field.</summary>
    public const int AccoutOrdersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::WS.Common.AccountOrderOutput> _repeated_accoutOrders_codec
        = pb::FieldCodec.ForMessage(18, global::WS.Common.AccountOrderOutput.Parser);
    private readonly pbc::RepeatedField<global::WS.Common.AccountOrderOutput> accoutOrders_ = new pbc::RepeatedField<global::WS.Common.AccountOrderOutput>();
    /// <summary>
    ///委托单详情
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::WS.Common.AccountOrderOutput> AccoutOrders {
      get { return accoutOrders_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccountOrderRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccountOrderRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TotalCount != other.TotalCount) return false;
      if(!accoutOrders_.Equals(other.accoutOrders_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TotalCount != 0) hash ^= TotalCount.GetHashCode();
      hash ^= accoutOrders_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TotalCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TotalCount);
      }
      accoutOrders_.WriteTo(output, _repeated_accoutOrders_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TotalCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalCount);
      }
      size += accoutOrders_.CalculateSize(_repeated_accoutOrders_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccountOrderRsp other) {
      if (other == null) {
        return;
      }
      if (other.TotalCount != 0) {
        TotalCount = other.TotalCount;
      }
      accoutOrders_.Add(other.accoutOrders_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TotalCount = input.ReadInt32();
            break;
          }
          case 18: {
            accoutOrders_.AddEntriesFrom(input, _repeated_accoutOrders_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///委托单
  /// </summary>
  public sealed partial class AccountOrderOutput : pb::IMessage<AccountOrderOutput> {
    private static readonly pb::MessageParser<AccountOrderOutput> _parser = new pb::MessageParser<AccountOrderOutput>(() => new AccountOrderOutput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccountOrderOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WS.Common.ServiceMessageReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountOrderOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountOrderOutput(AccountOrderOutput other) : this() {
      id_ = other.id_;
      accountId_ = other.accountId_;
      agentId_ = other.agentId_;
      instrumentId_ = other.instrumentId_;
      price_ = other.price_;
      lots_ = other.lots_;
      traderId_ = other.traderId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccountOrderOutput Clone() {
      return new AccountOrderOutput(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    ///唯一标识符
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AccountId" field.</summary>
    public const int AccountIdFieldNumber = 2;
    private string accountId_ = "";
    /// <summary>
    ///利润中心id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountId {
      get { return accountId_; }
      set {
        accountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AgentId" field.</summary>
    public const int AgentIdFieldNumber = 3;
    private string agentId_ = "";
    /// <summary>
    ///资金账号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AgentId {
      get { return agentId_; }
      set {
        agentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "InstrumentId" field.</summary>
    public const int InstrumentIdFieldNumber = 4;
    private string instrumentId_ = "";
    /// <summary>
    ///合约id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InstrumentId {
      get { return instrumentId_; }
      set {
        instrumentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 5;
    private double price_;
    /// <summary>
    ///价格
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "lots" field.</summary>
    public const int LotsFieldNumber = 6;
    private int lots_;
    /// <summary>
    ///手数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Lots {
      get { return lots_; }
      set {
        lots_ = value;
      }
    }

    /// <summary>Field number for the "traderId" field.</summary>
    public const int TraderIdFieldNumber = 7;
    private string traderId_ = "";
    /// <summary>
    ///交易员id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TraderId {
      get { return traderId_; }
      set {
        traderId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccountOrderOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccountOrderOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (AccountId != other.AccountId) return false;
      if (AgentId != other.AgentId) return false;
      if (InstrumentId != other.InstrumentId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Price, other.Price)) return false;
      if (Lots != other.Lots) return false;
      if (TraderId != other.TraderId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (AccountId.Length != 0) hash ^= AccountId.GetHashCode();
      if (AgentId.Length != 0) hash ^= AgentId.GetHashCode();
      if (InstrumentId.Length != 0) hash ^= InstrumentId.GetHashCode();
      if (Price != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Price);
      if (Lots != 0) hash ^= Lots.GetHashCode();
      if (TraderId.Length != 0) hash ^= TraderId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (AccountId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AccountId);
      }
      if (AgentId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AgentId);
      }
      if (InstrumentId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(InstrumentId);
      }
      if (Price != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Price);
      }
      if (Lots != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Lots);
      }
      if (TraderId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(TraderId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (AccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId);
      }
      if (AgentId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AgentId);
      }
      if (InstrumentId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstrumentId);
      }
      if (Price != 0D) {
        size += 1 + 8;
      }
      if (Lots != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lots);
      }
      if (TraderId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TraderId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccountOrderOutput other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.AccountId.Length != 0) {
        AccountId = other.AccountId;
      }
      if (other.AgentId.Length != 0) {
        AgentId = other.AgentId;
      }
      if (other.InstrumentId.Length != 0) {
        InstrumentId = other.InstrumentId;
      }
      if (other.Price != 0D) {
        Price = other.Price;
      }
      if (other.Lots != 0) {
        Lots = other.Lots;
      }
      if (other.TraderId.Length != 0) {
        TraderId = other.TraderId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            AccountId = input.ReadString();
            break;
          }
          case 26: {
            AgentId = input.ReadString();
            break;
          }
          case 34: {
            InstrumentId = input.ReadString();
            break;
          }
          case 41: {
            Price = input.ReadDouble();
            break;
          }
          case 48: {
            Lots = input.ReadInt32();
            break;
          }
          case 58: {
            TraderId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///成交记录响应
  /// </summary>
  public sealed partial class FillRsp : pb::IMessage<FillRsp> {
    private static readonly pb::MessageParser<FillRsp> _parser = new pb::MessageParser<FillRsp>(() => new FillRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FillRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WS.Common.ServiceMessageReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FillRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FillRsp(FillRsp other) : this() {
      totalCount_ = other.totalCount_;
      fills_ = other.fills_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FillRsp Clone() {
      return new FillRsp(this);
    }

    /// <summary>Field number for the "totalCount" field.</summary>
    public const int TotalCountFieldNumber = 1;
    private int totalCount_;
    /// <summary>
    ///总数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalCount {
      get { return totalCount_; }
      set {
        totalCount_ = value;
      }
    }

    /// <summary>Field number for the "Fills" field.</summary>
    public const int FillsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::WS.Common.FillOutput> _repeated_fills_codec
        = pb::FieldCodec.ForMessage(18, global::WS.Common.FillOutput.Parser);
    private readonly pbc::RepeatedField<global::WS.Common.FillOutput> fills_ = new pbc::RepeatedField<global::WS.Common.FillOutput>();
    /// <summary>
    ///成交记录
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::WS.Common.FillOutput> Fills {
      get { return fills_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FillRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FillRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TotalCount != other.TotalCount) return false;
      if(!fills_.Equals(other.fills_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TotalCount != 0) hash ^= TotalCount.GetHashCode();
      hash ^= fills_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TotalCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TotalCount);
      }
      fills_.WriteTo(output, _repeated_fills_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TotalCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalCount);
      }
      size += fills_.CalculateSize(_repeated_fills_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FillRsp other) {
      if (other == null) {
        return;
      }
      if (other.TotalCount != 0) {
        TotalCount = other.TotalCount;
      }
      fills_.Add(other.fills_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TotalCount = input.ReadInt32();
            break;
          }
          case 18: {
            fills_.AddEntriesFrom(input, _repeated_fills_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///成交记录
  /// </summary>
  public sealed partial class FillOutput : pb::IMessage<FillOutput> {
    private static readonly pb::MessageParser<FillOutput> _parser = new pb::MessageParser<FillOutput>(() => new FillOutput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FillOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::WS.Common.ServiceMessageReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FillOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FillOutput(FillOutput other) : this() {
      id_ = other.id_;
      accountId_ = other.accountId_;
      agentId_ = other.agentId_;
      reference_ = other.reference_;
      instrumentId_ = other.instrumentId_;
      price_ = other.price_;
      lots_ = other.lots_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FillOutput Clone() {
      return new FillOutput(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    ///唯一标识符
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AccountId" field.</summary>
    public const int AccountIdFieldNumber = 2;
    private string accountId_ = "";
    /// <summary>
    ///利润中心id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccountId {
      get { return accountId_; }
      set {
        accountId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AgentId" field.</summary>
    public const int AgentIdFieldNumber = 3;
    private string agentId_ = "";
    /// <summary>
    ///资金账号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AgentId {
      get { return agentId_; }
      set {
        agentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Reference" field.</summary>
    public const int ReferenceFieldNumber = 4;
    private string reference_ = "";
    /// <summary>
    ///from exhcange
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reference {
      get { return reference_; }
      set {
        reference_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "InstrumentId" field.</summary>
    public const int InstrumentIdFieldNumber = 5;
    private string instrumentId_ = "";
    /// <summary>
    ///合约id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InstrumentId {
      get { return instrumentId_; }
      set {
        instrumentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 6;
    private double price_;
    /// <summary>
    ///价格
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "lots" field.</summary>
    public const int LotsFieldNumber = 7;
    private int lots_;
    /// <summary>
    ///手数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Lots {
      get { return lots_; }
      set {
        lots_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FillOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FillOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (AccountId != other.AccountId) return false;
      if (AgentId != other.AgentId) return false;
      if (Reference != other.Reference) return false;
      if (InstrumentId != other.InstrumentId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Price, other.Price)) return false;
      if (Lots != other.Lots) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (AccountId.Length != 0) hash ^= AccountId.GetHashCode();
      if (AgentId.Length != 0) hash ^= AgentId.GetHashCode();
      if (Reference.Length != 0) hash ^= Reference.GetHashCode();
      if (InstrumentId.Length != 0) hash ^= InstrumentId.GetHashCode();
      if (Price != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Price);
      if (Lots != 0) hash ^= Lots.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (AccountId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AccountId);
      }
      if (AgentId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AgentId);
      }
      if (Reference.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Reference);
      }
      if (InstrumentId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(InstrumentId);
      }
      if (Price != 0D) {
        output.WriteRawTag(49);
        output.WriteDouble(Price);
      }
      if (Lots != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Lots);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (AccountId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccountId);
      }
      if (AgentId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AgentId);
      }
      if (Reference.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reference);
      }
      if (InstrumentId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstrumentId);
      }
      if (Price != 0D) {
        size += 1 + 8;
      }
      if (Lots != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lots);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FillOutput other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.AccountId.Length != 0) {
        AccountId = other.AccountId;
      }
      if (other.AgentId.Length != 0) {
        AgentId = other.AgentId;
      }
      if (other.Reference.Length != 0) {
        Reference = other.Reference;
      }
      if (other.InstrumentId.Length != 0) {
        InstrumentId = other.InstrumentId;
      }
      if (other.Price != 0D) {
        Price = other.Price;
      }
      if (other.Lots != 0) {
        Lots = other.Lots;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            AccountId = input.ReadString();
            break;
          }
          case 26: {
            AgentId = input.ReadString();
            break;
          }
          case 34: {
            Reference = input.ReadString();
            break;
          }
          case 42: {
            InstrumentId = input.ReadString();
            break;
          }
          case 49: {
            Price = input.ReadDouble();
            break;
          }
          case 56: {
            Lots = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
